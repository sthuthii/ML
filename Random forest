{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8bf22ccf",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:30.608989Z",
     "iopub.status.busy": "2025-09-18T13:02:30.608201Z",
     "iopub.status.idle": "2025-09-18T13:02:32.368794Z",
     "shell.execute_reply": "2025-09-18T13:02:32.367800Z"
    },
    "papermill": {
     "duration": 1.767812,
     "end_time": "2025-09-18T13:02:32.370251",
     "exception": false,
     "start_time": "2025-09-18T13:02:30.602439",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/medical-insurance-cost-dataset/insurance.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "raw",
   "id": "33413e73",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.003792,
     "end_time": "2025-09-18T13:02:32.378495",
     "exception": false,
     "start_time": "2025-09-18T13:02:32.374703",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b742b795",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:32.387379Z",
     "iopub.status.busy": "2025-09-18T13:02:32.386964Z",
     "iopub.status.idle": "2025-09-18T13:02:32.408752Z",
     "shell.execute_reply": "2025-09-18T13:02:32.407987Z"
    },
    "papermill": {
     "duration": 0.027999,
     "end_time": "2025-09-18T13:02:32.410311",
     "exception": false,
     "start_time": "2025-09-18T13:02:32.382312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/medical-insurance-cost-dataset/insurance.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "480bfcb3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:32.419082Z",
     "iopub.status.busy": "2025-09-18T13:02:32.418811Z",
     "iopub.status.idle": "2025-09-18T13:02:32.443303Z",
     "shell.execute_reply": "2025-09-18T13:02:32.442422Z"
    },
    "papermill": {
     "duration": 0.030448,
     "end_time": "2025-09-18T13:02:32.444849",
     "exception": false,
     "start_time": "2025-09-18T13:02:32.414401",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "      <th>charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>female</td>\n",
       "      <td>27.900</td>\n",
       "      <td>0</td>\n",
       "      <td>yes</td>\n",
       "      <td>southwest</td>\n",
       "      <td>16884.92400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18</td>\n",
       "      <td>male</td>\n",
       "      <td>33.770</td>\n",
       "      <td>1</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>1725.55230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28</td>\n",
       "      <td>male</td>\n",
       "      <td>33.000</td>\n",
       "      <td>3</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>4449.46200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>male</td>\n",
       "      <td>22.705</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>21984.47061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>male</td>\n",
       "      <td>28.880</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>3866.85520</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age     sex     bmi  children smoker     region      charges\n",
       "0   19  female  27.900         0    yes  southwest  16884.92400\n",
       "1   18    male  33.770         1     no  southeast   1725.55230\n",
       "2   28    male  33.000         3     no  southeast   4449.46200\n",
       "3   33    male  22.705         0     no  northwest  21984.47061\n",
       "4   32    male  28.880         0     no  northwest   3866.85520"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46926a77",
   "metadata": {
    "papermill": {
     "duration": 0.003742,
     "end_time": "2025-09-18T13:02:32.452772",
     "exception": false,
     "start_time": "2025-09-18T13:02:32.449030",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Performing the basic pre processing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0e6c6b79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:32.462189Z",
     "iopub.status.busy": "2025-09-18T13:02:32.461442Z",
     "iopub.status.idle": "2025-09-18T13:02:32.471707Z",
     "shell.execute_reply": "2025-09-18T13:02:32.470876Z"
    },
    "papermill": {
     "duration": 0.01646,
     "end_time": "2025-09-18T13:02:32.473056",
     "exception": false,
     "start_time": "2025-09-18T13:02:32.456596",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'], dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d17a3863",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:32.482594Z",
     "iopub.status.busy": "2025-09-18T13:02:32.481998Z",
     "iopub.status.idle": "2025-09-18T13:02:32.504008Z",
     "shell.execute_reply": "2025-09-18T13:02:32.503155Z"
    },
    "papermill": {
     "duration": 0.02822,
     "end_time": "2025-09-18T13:02:32.505424",
     "exception": false,
     "start_time": "2025-09-18T13:02:32.477204",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age  sex     bmi     children  smoker  region     charges    \n",
       "19   male    30.590  0         no      northwest  1639.56310     2\n",
       "47   male    29.830  3         no      northwest  9620.33070     1\n",
       "48   female  25.850  3         yes     southeast  24180.93350    1\n",
       "             22.800  0         no      southwest  8269.04400     1\n",
       "47   male    47.520  1         no      southeast  8083.91980     1\n",
       "                                                                ..\n",
       "31   female  25.740  0         no      southeast  3756.62160     1\n",
       "             23.600  2         no      southwest  4931.64700     1\n",
       "             21.755  0         no      northwest  4134.08245     1\n",
       "30   male    44.220  2         no      southeast  4266.16580     1\n",
       "64   male    40.480  0         no      southeast  13831.11520    1\n",
       "Name: count, Length: 1337, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ac5ccf92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:32.516021Z",
     "iopub.status.busy": "2025-09-18T13:02:32.515506Z",
     "iopub.status.idle": "2025-09-18T13:02:32.523446Z",
     "shell.execute_reply": "2025-09-18T13:02:32.522677Z"
    },
    "papermill": {
     "duration": 0.015176,
     "end_time": "2025-09-18T13:02:32.524909",
     "exception": false,
     "start_time": "2025-09-18T13:02:32.509733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df.iloc[:, :-1].values\n",
    "y = df.iloc[:, -1].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "43eff013",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:32.534716Z",
     "iopub.status.busy": "2025-09-18T13:02:32.533980Z",
     "iopub.status.idle": "2025-09-18T13:02:34.116918Z",
     "shell.execute_reply": "2025-09-18T13:02:34.116062Z"
    },
    "papermill": {
     "duration": 1.589593,
     "end_time": "2025-09-18T13:02:34.118735",
     "exception": false,
     "start_time": "2025-09-18T13:02:32.529142",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bbb4c08d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:34.128321Z",
     "iopub.status.busy": "2025-09-18T13:02:34.127895Z",
     "iopub.status.idle": "2025-09-18T13:02:34.132679Z",
     "shell.execute_reply": "2025-09-18T13:02:34.131974Z"
    },
    "papermill": {
     "duration": 0.010872,
     "end_time": "2025-09-18T13:02:34.133940",
     "exception": false,
     "start_time": "2025-09-18T13:02:34.123068",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "categorical_columns = df.select_dtypes(include=['object']).columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "673ca5ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:34.144810Z",
     "iopub.status.busy": "2025-09-18T13:02:34.144567Z",
     "iopub.status.idle": "2025-09-18T13:02:34.155978Z",
     "shell.execute_reply": "2025-09-18T13:02:34.155274Z"
    },
    "papermill": {
     "duration": 0.017717,
     "end_time": "2025-09-18T13:02:34.157306",
     "exception": false,
     "start_time": "2025-09-18T13:02:34.139589",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "encoder = OneHotEncoder(sparse_output=False)\n",
    "encoded = encoder.fit_transform(df[categorical_columns])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "246f0cb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:34.166896Z",
     "iopub.status.busy": "2025-09-18T13:02:34.166560Z",
     "iopub.status.idle": "2025-09-18T13:02:34.171168Z",
     "shell.execute_reply": "2025-09-18T13:02:34.170281Z"
    },
    "papermill": {
     "duration": 0.010929,
     "end_time": "2025-09-18T13:02:34.172576",
     "exception": false,
     "start_time": "2025-09-18T13:02:34.161647",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "one_hot_df = pd.DataFrame(encoded, columns=encoder.get_feature_names_out(categorical_columns))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "08ccb5ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:34.181905Z",
     "iopub.status.busy": "2025-09-18T13:02:34.181605Z",
     "iopub.status.idle": "2025-09-18T13:02:34.187160Z",
     "shell.execute_reply": "2025-09-18T13:02:34.186318Z"
    },
    "papermill": {
     "duration": 0.011937,
     "end_time": "2025-09-18T13:02:34.188661",
     "exception": false,
     "start_time": "2025-09-18T13:02:34.176724",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_encoded = pd.concat([df, one_hot_df], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1d6112a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:34.197727Z",
     "iopub.status.busy": "2025-09-18T13:02:34.197462Z",
     "iopub.status.idle": "2025-09-18T13:02:34.202573Z",
     "shell.execute_reply": "2025-09-18T13:02:34.201718Z"
    },
    "papermill": {
     "duration": 0.011173,
     "end_time": "2025-09-18T13:02:34.203949",
     "exception": false,
     "start_time": "2025-09-18T13:02:34.192776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_encoded = df_encoded.drop(categorical_columns, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0a9e924b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:34.213250Z",
     "iopub.status.busy": "2025-09-18T13:02:34.212946Z",
     "iopub.status.idle": "2025-09-18T13:02:34.228159Z",
     "shell.execute_reply": "2025-09-18T13:02:34.227279Z"
    },
    "papermill": {
     "duration": 0.021076,
     "end_time": "2025-09-18T13:02:34.229470",
     "exception": false,
     "start_time": "2025-09-18T13:02:34.208394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>charges</th>\n",
       "      <th>sex_female</th>\n",
       "      <th>sex_male</th>\n",
       "      <th>smoker_no</th>\n",
       "      <th>smoker_yes</th>\n",
       "      <th>region_northeast</th>\n",
       "      <th>region_northwest</th>\n",
       "      <th>region_southeast</th>\n",
       "      <th>region_southwest</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>27.900</td>\n",
       "      <td>0</td>\n",
       "      <td>16884.92400</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18</td>\n",
       "      <td>33.770</td>\n",
       "      <td>1</td>\n",
       "      <td>1725.55230</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28</td>\n",
       "      <td>33.000</td>\n",
       "      <td>3</td>\n",
       "      <td>4449.46200</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>22.705</td>\n",
       "      <td>0</td>\n",
       "      <td>21984.47061</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>28.880</td>\n",
       "      <td>0</td>\n",
       "      <td>3866.85520</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age     bmi  children      charges  sex_female  sex_male  smoker_no  \\\n",
       "0   19  27.900         0  16884.92400         1.0       0.0        0.0   \n",
       "1   18  33.770         1   1725.55230         0.0       1.0        1.0   \n",
       "2   28  33.000         3   4449.46200         0.0       1.0        1.0   \n",
       "3   33  22.705         0  21984.47061         0.0       1.0        1.0   \n",
       "4   32  28.880         0   3866.85520         0.0       1.0        1.0   \n",
       "\n",
       "   smoker_yes  region_northeast  region_northwest  region_southeast  \\\n",
       "0         1.0               0.0               0.0               0.0   \n",
       "1         0.0               0.0               0.0               1.0   \n",
       "2         0.0               0.0               0.0               1.0   \n",
       "3         0.0               0.0               1.0               0.0   \n",
       "4         0.0               0.0               1.0               0.0   \n",
       "\n",
       "   region_southwest  \n",
       "0               1.0  \n",
       "1               0.0  \n",
       "2               0.0  \n",
       "3               0.0  \n",
       "4               0.0  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_encoded.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "590a9386",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:34.239232Z",
     "iopub.status.busy": "2025-09-18T13:02:34.238929Z",
     "iopub.status.idle": "2025-09-18T13:02:34.244462Z",
     "shell.execute_reply": "2025-09-18T13:02:34.243690Z"
    },
    "papermill": {
     "duration": 0.01183,
     "end_time": "2025-09-18T13:02:34.245768",
     "exception": false,
     "start_time": "2025-09-18T13:02:34.233938",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df_encoded.iloc[:, :-1].values\n",
    "y = df_encoded.iloc[:, -1].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0d7148fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:34.255312Z",
     "iopub.status.busy": "2025-09-18T13:02:34.255017Z",
     "iopub.status.idle": "2025-09-18T13:02:34.260253Z",
     "shell.execute_reply": "2025-09-18T13:02:34.259515Z"
    },
    "papermill": {
     "duration": 0.011512,
     "end_time": "2025-09-18T13:02:34.261630",
     "exception": false,
     "start_time": "2025-09-18T13:02:34.250118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ad2318fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:34.271282Z",
     "iopub.status.busy": "2025-09-18T13:02:34.270999Z",
     "iopub.status.idle": "2025-09-18T13:02:34.335636Z",
     "shell.execute_reply": "2025-09-18T13:02:34.334887Z"
    },
    "papermill": {
     "duration": 0.071123,
     "end_time": "2025-09-18T13:02:34.337154",
     "exception": false,
     "start_time": "2025-09-18T13:02:34.266031",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler()\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f08badd9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:34.347214Z",
     "iopub.status.busy": "2025-09-18T13:02:34.346921Z",
     "iopub.status.idle": "2025-09-18T13:02:34.912996Z",
     "shell.execute_reply": "2025-09-18T13:02:34.912104Z"
    },
    "papermill": {
     "duration": 0.572785,
     "end_time": "2025-09-18T13:02:34.914479",
     "exception": false,
     "start_time": "2025-09-18T13:02:34.341694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor(random_state=42)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "regressor = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "regressor.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "53cad969",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:34.925238Z",
     "iopub.status.busy": "2025-09-18T13:02:34.924915Z",
     "iopub.status.idle": "2025-09-18T13:02:34.934544Z",
     "shell.execute_reply": "2025-09-18T13:02:34.933606Z"
    },
    "papermill": {
     "duration": 0.016898,
     "end_time": "2025-09-18T13:02:34.936086",
     "exception": false,
     "start_time": "2025-09-18T13:02:34.919188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "preditions = regressor.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fa357d9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-18T13:02:34.946794Z",
     "iopub.status.busy": "2025-09-18T13:02:34.946232Z",
     "iopub.status.idle": "2025-09-18T13:02:34.957461Z",
     "shell.execute_reply": "2025-09-18T13:02:34.956422Z"
    },
    "papermill": {
     "duration": 0.018219,
     "end_time": "2025-09-18T13:02:34.958846",
     "exception": false,
     "start_time": "2025-09-18T13:02:34.940627",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Out-of-Bag Score: False\n",
      "Mean Squared Error: 0.0\n",
      "R-squared: 1.0\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "\n",
    "oob_score = regressor.oob_score\n",
    "print(f'Out-of-Bag Score: {oob_score}')\n",
    "\n",
    "predictions = regressor.predict(X_test)\n",
    "\n",
    "mse = mean_squared_error(y_test, predictions)\n",
    "print(f'Mean Squared Error: {mse}')\n",
    "\n",
    "r2 = r2_score(y_test, predictions)\n",
    "print(f'R-squared: {r2}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "454b897d",
   "metadata": {
    "papermill": {
     "duration": 0.004577,
     "end_time": "2025-09-18T13:02:34.968302",
     "exception": false,
     "start_time": "2025-09-18T13:02:34.963725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 8129551,
     "sourceId": 12853160,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10.333212,
   "end_time": "2025-09-18T13:02:35.692216",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-18T13:02:25.359004",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
