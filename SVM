{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12622449,"sourceType":"datasetVersion","datasetId":7975086}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-11T03:52:35.132633Z","iopub.execute_input":"2025-09-11T03:52:35.132963Z","iopub.status.idle":"2025-09-11T03:52:35.141751Z","shell.execute_reply.started":"2025-09-11T03:52:35.132937Z","shell.execute_reply":"2025-09-11T03:52:35.140951Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/breast-cancer-dataset/Breast_cancer_dataset.csv\n","output_type":"stream"}],"execution_count":4},{"cell_type":"markdown","source":"Import the dataset and display the first five rows of the dataset","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/breast-cancer-dataset/Breast_cancer_dataset.csv\")\ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T03:52:05.462010Z","iopub.execute_input":"2025-09-11T03:52:05.463948Z","iopub.status.idle":"2025-09-11T03:52:05.536170Z","shell.execute_reply.started":"2025-09-11T03:52:05.463877Z","shell.execute_reply":"2025-09-11T03:52:05.535207Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"         id diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n0    842302         M        17.99         10.38          122.80     1001.0   \n1    842517         M        20.57         17.77          132.90     1326.0   \n2  84300903         M        19.69         21.25          130.00     1203.0   \n3  84348301         M        11.42         20.38           77.58      386.1   \n4  84358402         M        20.29         14.34          135.10     1297.0   \n\n   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n0          0.11840           0.27760          0.3001              0.14710   \n1          0.08474           0.07864          0.0869              0.07017   \n2          0.10960           0.15990          0.1974              0.12790   \n3          0.14250           0.28390          0.2414              0.10520   \n4          0.10030           0.13280          0.1980              0.10430   \n\n   ...  texture_worst  perimeter_worst  area_worst  smoothness_worst  \\\n0  ...          17.33           184.60      2019.0            0.1622   \n1  ...          23.41           158.80      1956.0            0.1238   \n2  ...          25.53           152.50      1709.0            0.1444   \n3  ...          26.50            98.87       567.7            0.2098   \n4  ...          16.67           152.20      1575.0            0.1374   \n\n   compactness_worst  concavity_worst  concave points_worst  symmetry_worst  \\\n0             0.6656           0.7119                0.2654          0.4601   \n1             0.1866           0.2416                0.1860          0.2750   \n2             0.4245           0.4504                0.2430          0.3613   \n3             0.8663           0.6869                0.2575          0.6638   \n4             0.2050           0.4000                0.1625          0.2364   \n\n   fractal_dimension_worst  Unnamed: 32  \n0                  0.11890          NaN  \n1                  0.08902          NaN  \n2                  0.08758          NaN  \n3                  0.17300          NaN  \n4                  0.07678          NaN  \n\n[5 rows x 33 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>diagnosis</th>\n      <th>radius_mean</th>\n      <th>texture_mean</th>\n      <th>perimeter_mean</th>\n      <th>area_mean</th>\n      <th>smoothness_mean</th>\n      <th>compactness_mean</th>\n      <th>concavity_mean</th>\n      <th>concave points_mean</th>\n      <th>...</th>\n      <th>texture_worst</th>\n      <th>perimeter_worst</th>\n      <th>area_worst</th>\n      <th>smoothness_worst</th>\n      <th>compactness_worst</th>\n      <th>concavity_worst</th>\n      <th>concave points_worst</th>\n      <th>symmetry_worst</th>\n      <th>fractal_dimension_worst</th>\n      <th>Unnamed: 32</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>842302</td>\n      <td>M</td>\n      <td>17.99</td>\n      <td>10.38</td>\n      <td>122.80</td>\n      <td>1001.0</td>\n      <td>0.11840</td>\n      <td>0.27760</td>\n      <td>0.3001</td>\n      <td>0.14710</td>\n      <td>...</td>\n      <td>17.33</td>\n      <td>184.60</td>\n      <td>2019.0</td>\n      <td>0.1622</td>\n      <td>0.6656</td>\n      <td>0.7119</td>\n      <td>0.2654</td>\n      <td>0.4601</td>\n      <td>0.11890</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>842517</td>\n      <td>M</td>\n      <td>20.57</td>\n      <td>17.77</td>\n      <td>132.90</td>\n      <td>1326.0</td>\n      <td>0.08474</td>\n      <td>0.07864</td>\n      <td>0.0869</td>\n      <td>0.07017</td>\n      <td>...</td>\n      <td>23.41</td>\n      <td>158.80</td>\n      <td>1956.0</td>\n      <td>0.1238</td>\n      <td>0.1866</td>\n      <td>0.2416</td>\n      <td>0.1860</td>\n      <td>0.2750</td>\n      <td>0.08902</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>84300903</td>\n      <td>M</td>\n      <td>19.69</td>\n      <td>21.25</td>\n      <td>130.00</td>\n      <td>1203.0</td>\n      <td>0.10960</td>\n      <td>0.15990</td>\n      <td>0.1974</td>\n      <td>0.12790</td>\n      <td>...</td>\n      <td>25.53</td>\n      <td>152.50</td>\n      <td>1709.0</td>\n      <td>0.1444</td>\n      <td>0.4245</td>\n      <td>0.4504</td>\n      <td>0.2430</td>\n      <td>0.3613</td>\n      <td>0.08758</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>84348301</td>\n      <td>M</td>\n      <td>11.42</td>\n      <td>20.38</td>\n      <td>77.58</td>\n      <td>386.1</td>\n      <td>0.14250</td>\n      <td>0.28390</td>\n      <td>0.2414</td>\n      <td>0.10520</td>\n      <td>...</td>\n      <td>26.50</td>\n      <td>98.87</td>\n      <td>567.7</td>\n      <td>0.2098</td>\n      <td>0.8663</td>\n      <td>0.6869</td>\n      <td>0.2575</td>\n      <td>0.6638</td>\n      <td>0.17300</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>84358402</td>\n      <td>M</td>\n      <td>20.29</td>\n      <td>14.34</td>\n      <td>135.10</td>\n      <td>1297.0</td>\n      <td>0.10030</td>\n      <td>0.13280</td>\n      <td>0.1980</td>\n      <td>0.10430</td>\n      <td>...</td>\n      <td>16.67</td>\n      <td>152.20</td>\n      <td>1575.0</td>\n      <td>0.1374</td>\n      <td>0.2050</td>\n      <td>0.4000</td>\n      <td>0.1625</td>\n      <td>0.2364</td>\n      <td>0.07678</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 33 columns</p>\n</div>"},"metadata":{}}],"execution_count":2},{"cell_type":"markdown","source":"In the dataset imported, there exists values which are not defined and needs to be cleaned or deleted from the working dataset.","metadata":{}},{"cell_type":"markdown","source":"We check for null values and total number of null values in all the features.","metadata":{}},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T03:53:13.407583Z","iopub.execute_input":"2025-09-11T03:53:13.407925Z","iopub.status.idle":"2025-09-11T03:53:13.416098Z","shell.execute_reply.started":"2025-09-11T03:53:13.407899Z","shell.execute_reply":"2025-09-11T03:53:13.415147Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"id                           0\ndiagnosis                    0\nradius_mean                  0\ntexture_mean                 0\nperimeter_mean               0\narea_mean                    0\nsmoothness_mean              0\ncompactness_mean             0\nconcavity_mean               0\nconcave points_mean          0\nsymmetry_mean                0\nfractal_dimension_mean       0\nradius_se                    0\ntexture_se                   0\nperimeter_se                 0\narea_se                      0\nsmoothness_se                0\ncompactness_se               0\nconcavity_se                 0\nconcave points_se            0\nsymmetry_se                  0\nfractal_dimension_se         0\nradius_worst                 0\ntexture_worst                0\nperimeter_worst              0\narea_worst                   0\nsmoothness_worst             0\ncompactness_worst            0\nconcavity_worst              0\nconcave points_worst         0\nsymmetry_worst               0\nfractal_dimension_worst      0\nUnnamed: 32                569\ndtype: int64"},"metadata":{}}],"execution_count":6},{"cell_type":"markdown","source":"We conclude that there exists a column named 'Unnamed: 32\" which is irrelavant and has 569 null values, which can cause noise while we are working with the dataset.","metadata":{}},{"cell_type":"markdown","source":"So we use the drop function to delete the column Unnamed: 32","metadata":{}},{"cell_type":"code","source":"df = df.drop([\"Unnamed: 32\"], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T03:59:50.367897Z","iopub.execute_input":"2025-09-11T03:59:50.368211Z","iopub.status.idle":"2025-09-11T03:59:50.373978Z","shell.execute_reply.started":"2025-09-11T03:59:50.368185Z","shell.execute_reply":"2025-09-11T03:59:50.372850Z"}},"outputs":[],"execution_count":17},{"cell_type":"markdown","source":"By looking at the data, we can observe that the column 'id' is irrelavant and hence we drop it","metadata":{}},{"cell_type":"code","source":"df = df.drop([\"id\"],axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T03:59:56.263054Z","iopub.execute_input":"2025-09-11T03:59:56.263355Z","iopub.status.idle":"2025-09-11T03:59:56.268537Z","shell.execute_reply.started":"2025-09-11T03:59:56.263332Z","shell.execute_reply":"2025-09-11T03:59:56.267655Z"}},"outputs":[],"execution_count":18},{"cell_type":"markdown","source":"Now we define the sttributes or features and target values","metadata":{}},{"cell_type":"markdown","source":"Here we define X, which will be containing all the necessary features except the target value.","metadata":{}},{"cell_type":"code","source":"X = df.drop([\"diagnosis\"],axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T03:59:59.468335Z","iopub.execute_input":"2025-09-11T03:59:59.468635Z","iopub.status.idle":"2025-09-11T03:59:59.474410Z","shell.execute_reply.started":"2025-09-11T03:59:59.468609Z","shell.execute_reply":"2025-09-11T03:59:59.473278Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"Here we define y, which will be the containing the target value only","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y = df[\"diagnosis\"].map({\"M\":0, \"B\":1})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T04:00:01.284783Z","iopub.execute_input":"2025-09-11T04:00:01.285154Z","iopub.status.idle":"2025-09-11T04:00:01.290649Z","shell.execute_reply.started":"2025-09-11T04:00:01.285126Z","shell.execute_reply":"2025-09-11T04:00:01.289696Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"X.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T04:00:02.701549Z","iopub.execute_input":"2025-09-11T04:00:02.701835Z","iopub.status.idle":"2025-09-11T04:00:02.723461Z","shell.execute_reply.started":"2025-09-11T04:00:02.701813Z","shell.execute_reply":"2025-09-11T04:00:02.722290Z"}},"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"   radius_mean  texture_mean  perimeter_mean  area_mean  smoothness_mean  \\\n0        17.99         10.38          122.80     1001.0          0.11840   \n1        20.57         17.77          132.90     1326.0          0.08474   \n2        19.69         21.25          130.00     1203.0          0.10960   \n3        11.42         20.38           77.58      386.1          0.14250   \n4        20.29         14.34          135.10     1297.0          0.10030   \n\n   compactness_mean  concavity_mean  concave points_mean  symmetry_mean  \\\n0           0.27760          0.3001              0.14710         0.2419   \n1           0.07864          0.0869              0.07017         0.1812   \n2           0.15990          0.1974              0.12790         0.2069   \n3           0.28390          0.2414              0.10520         0.2597   \n4           0.13280          0.1980              0.10430         0.1809   \n\n   fractal_dimension_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n0                 0.07871  ...         25.38          17.33           184.60   \n1                 0.05667  ...         24.99          23.41           158.80   \n2                 0.05999  ...         23.57          25.53           152.50   \n3                 0.09744  ...         14.91          26.50            98.87   \n4                 0.05883  ...         22.54          16.67           152.20   \n\n   area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n0      2019.0            0.1622             0.6656           0.7119   \n1      1956.0            0.1238             0.1866           0.2416   \n2      1709.0            0.1444             0.4245           0.4504   \n3       567.7            0.2098             0.8663           0.6869   \n4      1575.0            0.1374             0.2050           0.4000   \n\n   concave points_worst  symmetry_worst  fractal_dimension_worst  \n0                0.2654          0.4601                  0.11890  \n1                0.1860          0.2750                  0.08902  \n2                0.2430          0.3613                  0.08758  \n3                0.2575          0.6638                  0.17300  \n4                0.1625          0.2364                  0.07678  \n\n[5 rows x 30 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>radius_mean</th>\n      <th>texture_mean</th>\n      <th>perimeter_mean</th>\n      <th>area_mean</th>\n      <th>smoothness_mean</th>\n      <th>compactness_mean</th>\n      <th>concavity_mean</th>\n      <th>concave points_mean</th>\n      <th>symmetry_mean</th>\n      <th>fractal_dimension_mean</th>\n      <th>...</th>\n      <th>radius_worst</th>\n      <th>texture_worst</th>\n      <th>perimeter_worst</th>\n      <th>area_worst</th>\n      <th>smoothness_worst</th>\n      <th>compactness_worst</th>\n      <th>concavity_worst</th>\n      <th>concave points_worst</th>\n      <th>symmetry_worst</th>\n      <th>fractal_dimension_worst</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>17.99</td>\n      <td>10.38</td>\n      <td>122.80</td>\n      <td>1001.0</td>\n      <td>0.11840</td>\n      <td>0.27760</td>\n      <td>0.3001</td>\n      <td>0.14710</td>\n      <td>0.2419</td>\n      <td>0.07871</td>\n      <td>...</td>\n      <td>25.38</td>\n      <td>17.33</td>\n      <td>184.60</td>\n      <td>2019.0</td>\n      <td>0.1622</td>\n      <td>0.6656</td>\n      <td>0.7119</td>\n      <td>0.2654</td>\n      <td>0.4601</td>\n      <td>0.11890</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20.57</td>\n      <td>17.77</td>\n      <td>132.90</td>\n      <td>1326.0</td>\n      <td>0.08474</td>\n      <td>0.07864</td>\n      <td>0.0869</td>\n      <td>0.07017</td>\n      <td>0.1812</td>\n      <td>0.05667</td>\n      <td>...</td>\n      <td>24.99</td>\n      <td>23.41</td>\n      <td>158.80</td>\n      <td>1956.0</td>\n      <td>0.1238</td>\n      <td>0.1866</td>\n      <td>0.2416</td>\n      <td>0.1860</td>\n      <td>0.2750</td>\n      <td>0.08902</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>19.69</td>\n      <td>21.25</td>\n      <td>130.00</td>\n      <td>1203.0</td>\n      <td>0.10960</td>\n      <td>0.15990</td>\n      <td>0.1974</td>\n      <td>0.12790</td>\n      <td>0.2069</td>\n      <td>0.05999</td>\n      <td>...</td>\n      <td>23.57</td>\n      <td>25.53</td>\n      <td>152.50</td>\n      <td>1709.0</td>\n      <td>0.1444</td>\n      <td>0.4245</td>\n      <td>0.4504</td>\n      <td>0.2430</td>\n      <td>0.3613</td>\n      <td>0.08758</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>11.42</td>\n      <td>20.38</td>\n      <td>77.58</td>\n      <td>386.1</td>\n      <td>0.14250</td>\n      <td>0.28390</td>\n      <td>0.2414</td>\n      <td>0.10520</td>\n      <td>0.2597</td>\n      <td>0.09744</td>\n      <td>...</td>\n      <td>14.91</td>\n      <td>26.50</td>\n      <td>98.87</td>\n      <td>567.7</td>\n      <td>0.2098</td>\n      <td>0.8663</td>\n      <td>0.6869</td>\n      <td>0.2575</td>\n      <td>0.6638</td>\n      <td>0.17300</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>20.29</td>\n      <td>14.34</td>\n      <td>135.10</td>\n      <td>1297.0</td>\n      <td>0.10030</td>\n      <td>0.13280</td>\n      <td>0.1980</td>\n      <td>0.10430</td>\n      <td>0.1809</td>\n      <td>0.05883</td>\n      <td>...</td>\n      <td>22.54</td>\n      <td>16.67</td>\n      <td>152.20</td>\n      <td>1575.0</td>\n      <td>0.1374</td>\n      <td>0.2050</td>\n      <td>0.4000</td>\n      <td>0.1625</td>\n      <td>0.2364</td>\n      <td>0.07678</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 30 columns</p>\n</div>"},"metadata":{}}],"execution_count":21},{"cell_type":"code","source":"y.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T04:00:15.284925Z","iopub.execute_input":"2025-09-11T04:00:15.285203Z","iopub.status.idle":"2025-09-11T04:00:15.291868Z","shell.execute_reply.started":"2025-09-11T04:00:15.285180Z","shell.execute_reply":"2025-09-11T04:00:15.291024Z"}},"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"0    0\n1    0\n2    0\n3    0\n4    0\nName: diagnosis, dtype: int64"},"metadata":{}}],"execution_count":22},{"cell_type":"markdown","source":"Now we split the data into train and test set.","metadata":{}},{"cell_type":"markdown","source":"We define X_train which will be containing the training data, and X_test, which contains testing data.\nAlso we have y_train which contains labels or output for training data and y_tet contains the same testing data.","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T04:02:35.587493Z","iopub.execute_input":"2025-09-11T04:02:35.587818Z","iopub.status.idle":"2025-09-11T04:02:36.410659Z","shell.execute_reply.started":"2025-09-11T04:02:35.587769Z","shell.execute_reply":"2025-09-11T04:02:36.409967Z"}},"outputs":[],"execution_count":23},{"cell_type":"markdown","source":"Before we train the algorithm, its necessary to scale all the features, so that input data maintains a boundary. We use StandardScaler to do this operation.","metadata":{}},{"cell_type":"markdown","source":"fit_tranform learns about your parameters as well as tranforms or scales the data\ntransform only transforms or scales your data","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T04:03:42.096682Z","iopub.execute_input":"2025-09-11T04:03:42.097481Z","iopub.status.idle":"2025-09-11T04:03:42.176913Z","shell.execute_reply.started":"2025-09-11T04:03:42.097453Z","shell.execute_reply":"2025-09-11T04:03:42.176035Z"}},"outputs":[],"execution_count":25},{"cell_type":"markdown","source":"We define the SVM model","metadata":{}},{"cell_type":"code","source":"from sklearn.svm import SVC\nsvm_classifier = SVC(kernel='linear', C=1.0, random_state=42)\nsvm_classifier.fit(X_train_scaled, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T04:05:02.915400Z","iopub.execute_input":"2025-09-11T04:05:02.915697Z","iopub.status.idle":"2025-09-11T04:05:03.045328Z","shell.execute_reply.started":"2025-09-11T04:05:02.915678Z","shell.execute_reply":"2025-09-11T04:05:03.044266Z"}},"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"SVC(kernel='linear', random_state=42)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(kernel=&#x27;linear&#x27;, random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":27},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, classification_report\ny_pred = svm_classifier.predict(X_test_scaled)\nprint(f\"Accuracy: {accuracy_score(y_test, y_pred):.2f}\")\nprint(classification_report(y_test, y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T04:06:46.147358Z","iopub.execute_input":"2025-09-11T04:06:46.147634Z","iopub.status.idle":"2025-09-11T04:06:46.163546Z","shell.execute_reply.started":"2025-09-11T04:06:46.147614Z","shell.execute_reply":"2025-09-11T04:06:46.162685Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.96\n              precision    recall  f1-score   support\n\n           0       0.93      0.95      0.94        43\n           1       0.97      0.96      0.96        71\n\n    accuracy                           0.96       114\n   macro avg       0.95      0.96      0.95       114\nweighted avg       0.96      0.96      0.96       114\n\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"df1 = pd.read_csv(\"/kaggle/input/breast-cancer-dataset/Breast_cancer_dataset.csv\")\ndf1 = df1.drop([\"diagnosis\"], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T04:13:38.434279Z","iopub.execute_input":"2025-09-11T04:13:38.434595Z","iopub.status.idle":"2025-09-11T04:13:38.460410Z","shell.execute_reply.started":"2025-09-11T04:13:38.434571Z","shell.execute_reply":"2025-09-11T04:13:38.459546Z"}},"outputs":[],"execution_count":37},{"cell_type":"code","source":"df1 = df1.drop([\"Unnamed: 32\"], axis=1)\nfirst_row = df1.iloc[0]\nprint(first_row)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T04:14:55.627423Z","iopub.execute_input":"2025-09-11T04:14:55.627712Z","iopub.status.idle":"2025-09-11T04:14:55.634987Z","shell.execute_reply.started":"2025-09-11T04:14:55.627692Z","shell.execute_reply":"2025-09-11T04:14:55.634149Z"}},"outputs":[{"name":"stdout","text":"radius_mean                  17.990000\ntexture_mean                 10.380000\nperimeter_mean              122.800000\narea_mean                  1001.000000\nsmoothness_mean               0.118400\ncompactness_mean              0.277600\nconcavity_mean                0.300100\nconcave points_mean           0.147100\nsymmetry_mean                 0.241900\nfractal_dimension_mean        0.078710\nradius_se                     1.095000\ntexture_se                    0.905300\nperimeter_se                  8.589000\narea_se                     153.400000\nsmoothness_se                 0.006399\ncompactness_se                0.049040\nconcavity_se                  0.053730\nconcave points_se             0.015870\nsymmetry_se                   0.030030\nfractal_dimension_se          0.006193\nradius_worst                 25.380000\ntexture_worst                17.330000\nperimeter_worst             184.600000\narea_worst                 2019.000000\nsmoothness_worst              0.162200\ncompactness_worst             0.665600\nconcavity_worst               0.711900\nconcave points_worst          0.265400\nsymmetry_worst                0.460100\nfractal_dimension_worst       0.118900\nName: 0, dtype: float64\n","output_type":"stream"}],"execution_count":41},{"cell_type":"code","source":"df1 = df1.drop([\"id\"],axis=1)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Giving input to the model to check the output.","metadata":{}},{"cell_type":"code","source":"inputs = df1.iloc[0].values.reshape(1,-1)\n\nanswer = svm_classifier.predict(inputs)\nprint(answer)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T04:19:15.416442Z","iopub.execute_input":"2025-09-11T04:19:15.416725Z","iopub.status.idle":"2025-09-11T04:19:15.423036Z","shell.execute_reply.started":"2025-09-11T04:19:15.416705Z","shell.execute_reply":"2025-09-11T04:19:15.422052Z"}},"outputs":[{"name":"stdout","text":"[0]\n","output_type":"stream"}],"execution_count":46},{"cell_type":"markdown","source":"Reshaping the extracted row to a 2d array.","metadata":{}},{"cell_type":"code","source":"n_features = df1.shape[1]\nprint(n_features)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T04:29:44.146100Z","iopub.execute_input":"2025-09-11T04:29:44.146473Z","iopub.status.idle":"2025-09-11T04:29:44.151769Z","shell.execute_reply.started":"2025-09-11T04:29:44.146446Z","shell.execute_reply":"2025-09-11T04:29:44.150837Z"}},"outputs":[{"name":"stdout","text":"30\n","output_type":"stream"}],"execution_count":63},{"cell_type":"markdown","source":"Picking random inputs to check the different outputs given by the model","metadata":{}},{"cell_type":"code","source":"random_input = np.random.rand(n_features) * 40\nrandom_input = random_input.reshape(1,-1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T04:29:46.481425Z","iopub.execute_input":"2025-09-11T04:29:46.481943Z","iopub.status.idle":"2025-09-11T04:29:46.486755Z","shell.execute_reply.started":"2025-09-11T04:29:46.481907Z","shell.execute_reply":"2025-09-11T04:29:46.485873Z"}},"outputs":[],"execution_count":64},{"cell_type":"code","source":"random_inputs = scaler.transform(random_input)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T04:29:50.290396Z","iopub.execute_input":"2025-09-11T04:29:50.291139Z","iopub.status.idle":"2025-09-11T04:29:50.296346Z","shell.execute_reply.started":"2025-09-11T04:29:50.291104Z","shell.execute_reply":"2025-09-11T04:29:50.295302Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n  warnings.warn(\n","output_type":"stream"}],"execution_count":65},{"cell_type":"code","source":"answer = svm_classifier.predict(random_inputs)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T04:29:52.617370Z","iopub.execute_input":"2025-09-11T04:29:52.617686Z","iopub.status.idle":"2025-09-11T04:29:52.622538Z","shell.execute_reply.started":"2025-09-11T04:29:52.617662Z","shell.execute_reply":"2025-09-11T04:29:52.621498Z"}},"outputs":[],"execution_count":66},{"cell_type":"code","source":"label = {0: \"Malignant\", 1: \"Benign\"}\nprint(random_input)\n\nprint(\"The predicted value is: \", label[answer[0]])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-11T04:46:55.235952Z","iopub.execute_input":"2025-09-11T04:46:55.236301Z","iopub.status.idle":"2025-09-11T04:46:55.241591Z","shell.execute_reply.started":"2025-09-11T04:46:55.236232Z","shell.execute_reply":"2025-09-11T04:46:55.240570Z"}},"outputs":[{"name":"stdout","text":"[[ 5.68194503  0.36550917 37.26934005  8.67730401 30.4883527   4.21960105\n  35.42340193 31.78033057 12.47409558 18.50527391 12.36052857  0.53050303\n  36.75108929  2.87484992 22.240599   27.93848716 30.10152003 20.32911719\n  16.17110078 29.42176926 33.82945399 28.6286905  17.97129069 29.05651956\n  12.18474903  1.16081002 17.69363482 10.87153957 26.83584751 30.78963469]]\nThe predicted value is:  Benign\n","output_type":"stream"}],"execution_count":72}]}