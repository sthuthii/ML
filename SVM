{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e1c6030f",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:28.496276Z",
     "iopub.status.busy": "2025-09-11T04:51:28.495554Z",
     "iopub.status.idle": "2025-09-11T04:51:30.749205Z",
     "shell.execute_reply": "2025-09-11T04:51:30.747755Z"
    },
    "papermill": {
     "duration": 2.264218,
     "end_time": "2025-09-11T04:51:30.751071",
     "exception": false,
     "start_time": "2025-09-11T04:51:28.486853",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/breast-cancer-dataset/Breast_cancer_dataset.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed1bee04",
   "metadata": {
    "papermill": {
     "duration": 0.006448,
     "end_time": "2025-09-11T04:51:30.763812",
     "exception": false,
     "start_time": "2025-09-11T04:51:30.757364",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Import the dataset and display the first five rows of the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0b4d46a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:30.777577Z",
     "iopub.status.busy": "2025-09-11T04:51:30.776853Z",
     "iopub.status.idle": "2025-09-11T04:51:30.851820Z",
     "shell.execute_reply": "2025-09-11T04:51:30.850403Z"
    },
    "papermill": {
     "duration": 0.084142,
     "end_time": "2025-09-11T04:51:30.853700",
     "exception": false,
     "start_time": "2025-09-11T04:51:30.769558",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>diagnosis</th>\n",
       "      <th>radius_mean</th>\n",
       "      <th>texture_mean</th>\n",
       "      <th>perimeter_mean</th>\n",
       "      <th>area_mean</th>\n",
       "      <th>smoothness_mean</th>\n",
       "      <th>compactness_mean</th>\n",
       "      <th>concavity_mean</th>\n",
       "      <th>concave points_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>texture_worst</th>\n",
       "      <th>perimeter_worst</th>\n",
       "      <th>area_worst</th>\n",
       "      <th>smoothness_worst</th>\n",
       "      <th>compactness_worst</th>\n",
       "      <th>concavity_worst</th>\n",
       "      <th>concave points_worst</th>\n",
       "      <th>symmetry_worst</th>\n",
       "      <th>fractal_dimension_worst</th>\n",
       "      <th>Unnamed: 32</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>842302</td>\n",
       "      <td>M</td>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.3001</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>...</td>\n",
       "      <td>17.33</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.1622</td>\n",
       "      <td>0.6656</td>\n",
       "      <td>0.7119</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>842517</td>\n",
       "      <td>M</td>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.0869</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>...</td>\n",
       "      <td>23.41</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.1238</td>\n",
       "      <td>0.1866</td>\n",
       "      <td>0.2416</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>84300903</td>\n",
       "      <td>M</td>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.1974</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>...</td>\n",
       "      <td>25.53</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.1444</td>\n",
       "      <td>0.4245</td>\n",
       "      <td>0.4504</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>84348301</td>\n",
       "      <td>M</td>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.2414</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>...</td>\n",
       "      <td>26.50</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.2098</td>\n",
       "      <td>0.8663</td>\n",
       "      <td>0.6869</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>84358402</td>\n",
       "      <td>M</td>\n",
       "      <td>20.29</td>\n",
       "      <td>14.34</td>\n",
       "      <td>135.10</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>0.10030</td>\n",
       "      <td>0.13280</td>\n",
       "      <td>0.1980</td>\n",
       "      <td>0.10430</td>\n",
       "      <td>...</td>\n",
       "      <td>16.67</td>\n",
       "      <td>152.20</td>\n",
       "      <td>1575.0</td>\n",
       "      <td>0.1374</td>\n",
       "      <td>0.2050</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2364</td>\n",
       "      <td>0.07678</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         id diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",
       "0    842302         M        17.99         10.38          122.80     1001.0   \n",
       "1    842517         M        20.57         17.77          132.90     1326.0   \n",
       "2  84300903         M        19.69         21.25          130.00     1203.0   \n",
       "3  84348301         M        11.42         20.38           77.58      386.1   \n",
       "4  84358402         M        20.29         14.34          135.10     1297.0   \n",
       "\n",
       "   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",
       "0          0.11840           0.27760          0.3001              0.14710   \n",
       "1          0.08474           0.07864          0.0869              0.07017   \n",
       "2          0.10960           0.15990          0.1974              0.12790   \n",
       "3          0.14250           0.28390          0.2414              0.10520   \n",
       "4          0.10030           0.13280          0.1980              0.10430   \n",
       "\n",
       "   ...  texture_worst  perimeter_worst  area_worst  smoothness_worst  \\\n",
       "0  ...          17.33           184.60      2019.0            0.1622   \n",
       "1  ...          23.41           158.80      1956.0            0.1238   \n",
       "2  ...          25.53           152.50      1709.0            0.1444   \n",
       "3  ...          26.50            98.87       567.7            0.2098   \n",
       "4  ...          16.67           152.20      1575.0            0.1374   \n",
       "\n",
       "   compactness_worst  concavity_worst  concave points_worst  symmetry_worst  \\\n",
       "0             0.6656           0.7119                0.2654          0.4601   \n",
       "1             0.1866           0.2416                0.1860          0.2750   \n",
       "2             0.4245           0.4504                0.2430          0.3613   \n",
       "3             0.8663           0.6869                0.2575          0.6638   \n",
       "4             0.2050           0.4000                0.1625          0.2364   \n",
       "\n",
       "   fractal_dimension_worst  Unnamed: 32  \n",
       "0                  0.11890          NaN  \n",
       "1                  0.08902          NaN  \n",
       "2                  0.08758          NaN  \n",
       "3                  0.17300          NaN  \n",
       "4                  0.07678          NaN  \n",
       "\n",
       "[5 rows x 33 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/breast-cancer-dataset/Breast_cancer_dataset.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "194ab36c",
   "metadata": {
    "papermill": {
     "duration": 0.005627,
     "end_time": "2025-09-11T04:51:30.866307",
     "exception": false,
     "start_time": "2025-09-11T04:51:30.860680",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In the dataset imported, there exists values which are not defined and needs to be cleaned or deleted from the working dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89ebeaac",
   "metadata": {
    "papermill": {
     "duration": 0.005497,
     "end_time": "2025-09-11T04:51:30.877627",
     "exception": false,
     "start_time": "2025-09-11T04:51:30.872130",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We check for null values and total number of null values in all the features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e2954457",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:30.891301Z",
     "iopub.status.busy": "2025-09-11T04:51:30.890902Z",
     "iopub.status.idle": "2025-09-11T04:51:30.902761Z",
     "shell.execute_reply": "2025-09-11T04:51:30.901764Z"
    },
    "papermill": {
     "duration": 0.021275,
     "end_time": "2025-09-11T04:51:30.904732",
     "exception": false,
     "start_time": "2025-09-11T04:51:30.883457",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                           0\n",
       "diagnosis                    0\n",
       "radius_mean                  0\n",
       "texture_mean                 0\n",
       "perimeter_mean               0\n",
       "area_mean                    0\n",
       "smoothness_mean              0\n",
       "compactness_mean             0\n",
       "concavity_mean               0\n",
       "concave points_mean          0\n",
       "symmetry_mean                0\n",
       "fractal_dimension_mean       0\n",
       "radius_se                    0\n",
       "texture_se                   0\n",
       "perimeter_se                 0\n",
       "area_se                      0\n",
       "smoothness_se                0\n",
       "compactness_se               0\n",
       "concavity_se                 0\n",
       "concave points_se            0\n",
       "symmetry_se                  0\n",
       "fractal_dimension_se         0\n",
       "radius_worst                 0\n",
       "texture_worst                0\n",
       "perimeter_worst              0\n",
       "area_worst                   0\n",
       "smoothness_worst             0\n",
       "compactness_worst            0\n",
       "concavity_worst              0\n",
       "concave points_worst         0\n",
       "symmetry_worst               0\n",
       "fractal_dimension_worst      0\n",
       "Unnamed: 32                569\n",
       "dtype: int64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c67c4bb",
   "metadata": {
    "papermill": {
     "duration": 0.007464,
     "end_time": "2025-09-11T04:51:30.919122",
     "exception": false,
     "start_time": "2025-09-11T04:51:30.911658",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We conclude that there exists a column named 'Unnamed: 32\" which is irrelavant and has 569 null values, which can cause noise while we are working with the dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fab90df1",
   "metadata": {
    "papermill": {
     "duration": 0.006404,
     "end_time": "2025-09-11T04:51:30.931796",
     "exception": false,
     "start_time": "2025-09-11T04:51:30.925392",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "So we use the drop function to delete the column Unnamed: 32"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6b15aed2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:30.945325Z",
     "iopub.status.busy": "2025-09-11T04:51:30.944990Z",
     "iopub.status.idle": "2025-09-11T04:51:30.956262Z",
     "shell.execute_reply": "2025-09-11T04:51:30.955106Z"
    },
    "papermill": {
     "duration": 0.020642,
     "end_time": "2025-09-11T04:51:30.958531",
     "exception": false,
     "start_time": "2025-09-11T04:51:30.937889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.drop([\"Unnamed: 32\"], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd4b097d",
   "metadata": {
    "papermill": {
     "duration": 0.006409,
     "end_time": "2025-09-11T04:51:30.971734",
     "exception": false,
     "start_time": "2025-09-11T04:51:30.965325",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "By looking at the data, we can observe that the column 'id' is irrelavant and hence we drop it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ac4d9efa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:30.986109Z",
     "iopub.status.busy": "2025-09-11T04:51:30.985739Z",
     "iopub.status.idle": "2025-09-11T04:51:30.992253Z",
     "shell.execute_reply": "2025-09-11T04:51:30.991215Z"
    },
    "papermill": {
     "duration": 0.016031,
     "end_time": "2025-09-11T04:51:30.994235",
     "exception": false,
     "start_time": "2025-09-11T04:51:30.978204",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.drop([\"id\"],axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f45c1056",
   "metadata": {
    "papermill": {
     "duration": 0.006003,
     "end_time": "2025-09-11T04:51:31.006479",
     "exception": false,
     "start_time": "2025-09-11T04:51:31.000476",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we define the sttributes or features and target values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1818cd27",
   "metadata": {
    "papermill": {
     "duration": 0.005632,
     "end_time": "2025-09-11T04:51:31.017994",
     "exception": false,
     "start_time": "2025-09-11T04:51:31.012362",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Here we define X, which will be containing all the necessary features except the target value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c38bd812",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:31.031747Z",
     "iopub.status.busy": "2025-09-11T04:51:31.031356Z",
     "iopub.status.idle": "2025-09-11T04:51:31.038966Z",
     "shell.execute_reply": "2025-09-11T04:51:31.037603Z"
    },
    "papermill": {
     "duration": 0.016761,
     "end_time": "2025-09-11T04:51:31.040852",
     "exception": false,
     "start_time": "2025-09-11T04:51:31.024091",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df.drop([\"diagnosis\"],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ec75986b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:31.054638Z",
     "iopub.status.busy": "2025-09-11T04:51:31.054237Z",
     "iopub.status.idle": "2025-09-11T04:51:31.060998Z",
     "shell.execute_reply": "2025-09-11T04:51:31.059786Z"
    },
    "papermill": {
     "duration": 0.016433,
     "end_time": "2025-09-11T04:51:31.063402",
     "exception": false,
     "start_time": "2025-09-11T04:51:31.046969",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y = df[\"diagnosis\"].map({\"M\":0, \"B\":1})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7f49b473",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:31.077717Z",
     "iopub.status.busy": "2025-09-11T04:51:31.077326Z",
     "iopub.status.idle": "2025-09-11T04:51:31.101204Z",
     "shell.execute_reply": "2025-09-11T04:51:31.099978Z"
    },
    "papermill": {
     "duration": 0.033089,
     "end_time": "2025-09-11T04:51:31.102987",
     "exception": false,
     "start_time": "2025-09-11T04:51:31.069898",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>radius_mean</th>\n",
       "      <th>texture_mean</th>\n",
       "      <th>perimeter_mean</th>\n",
       "      <th>area_mean</th>\n",
       "      <th>smoothness_mean</th>\n",
       "      <th>compactness_mean</th>\n",
       "      <th>concavity_mean</th>\n",
       "      <th>concave points_mean</th>\n",
       "      <th>symmetry_mean</th>\n",
       "      <th>fractal_dimension_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>radius_worst</th>\n",
       "      <th>texture_worst</th>\n",
       "      <th>perimeter_worst</th>\n",
       "      <th>area_worst</th>\n",
       "      <th>smoothness_worst</th>\n",
       "      <th>compactness_worst</th>\n",
       "      <th>concavity_worst</th>\n",
       "      <th>concave points_worst</th>\n",
       "      <th>symmetry_worst</th>\n",
       "      <th>fractal_dimension_worst</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.3001</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>0.2419</td>\n",
       "      <td>0.07871</td>\n",
       "      <td>...</td>\n",
       "      <td>25.38</td>\n",
       "      <td>17.33</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.1622</td>\n",
       "      <td>0.6656</td>\n",
       "      <td>0.7119</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.0869</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>0.1812</td>\n",
       "      <td>0.05667</td>\n",
       "      <td>...</td>\n",
       "      <td>24.99</td>\n",
       "      <td>23.41</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.1238</td>\n",
       "      <td>0.1866</td>\n",
       "      <td>0.2416</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.1974</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>0.2069</td>\n",
       "      <td>0.05999</td>\n",
       "      <td>...</td>\n",
       "      <td>23.57</td>\n",
       "      <td>25.53</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.1444</td>\n",
       "      <td>0.4245</td>\n",
       "      <td>0.4504</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.2414</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>0.2597</td>\n",
       "      <td>0.09744</td>\n",
       "      <td>...</td>\n",
       "      <td>14.91</td>\n",
       "      <td>26.50</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.2098</td>\n",
       "      <td>0.8663</td>\n",
       "      <td>0.6869</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20.29</td>\n",
       "      <td>14.34</td>\n",
       "      <td>135.10</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>0.10030</td>\n",
       "      <td>0.13280</td>\n",
       "      <td>0.1980</td>\n",
       "      <td>0.10430</td>\n",
       "      <td>0.1809</td>\n",
       "      <td>0.05883</td>\n",
       "      <td>...</td>\n",
       "      <td>22.54</td>\n",
       "      <td>16.67</td>\n",
       "      <td>152.20</td>\n",
       "      <td>1575.0</td>\n",
       "      <td>0.1374</td>\n",
       "      <td>0.2050</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2364</td>\n",
       "      <td>0.07678</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   radius_mean  texture_mean  perimeter_mean  area_mean  smoothness_mean  \\\n",
       "0        17.99         10.38          122.80     1001.0          0.11840   \n",
       "1        20.57         17.77          132.90     1326.0          0.08474   \n",
       "2        19.69         21.25          130.00     1203.0          0.10960   \n",
       "3        11.42         20.38           77.58      386.1          0.14250   \n",
       "4        20.29         14.34          135.10     1297.0          0.10030   \n",
       "\n",
       "   compactness_mean  concavity_mean  concave points_mean  symmetry_mean  \\\n",
       "0           0.27760          0.3001              0.14710         0.2419   \n",
       "1           0.07864          0.0869              0.07017         0.1812   \n",
       "2           0.15990          0.1974              0.12790         0.2069   \n",
       "3           0.28390          0.2414              0.10520         0.2597   \n",
       "4           0.13280          0.1980              0.10430         0.1809   \n",
       "\n",
       "   fractal_dimension_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n",
       "0                 0.07871  ...         25.38          17.33           184.60   \n",
       "1                 0.05667  ...         24.99          23.41           158.80   \n",
       "2                 0.05999  ...         23.57          25.53           152.50   \n",
       "3                 0.09744  ...         14.91          26.50            98.87   \n",
       "4                 0.05883  ...         22.54          16.67           152.20   \n",
       "\n",
       "   area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n",
       "0      2019.0            0.1622             0.6656           0.7119   \n",
       "1      1956.0            0.1238             0.1866           0.2416   \n",
       "2      1709.0            0.1444             0.4245           0.4504   \n",
       "3       567.7            0.2098             0.8663           0.6869   \n",
       "4      1575.0            0.1374             0.2050           0.4000   \n",
       "\n",
       "   concave points_worst  symmetry_worst  fractal_dimension_worst  \n",
       "0                0.2654          0.4601                  0.11890  \n",
       "1                0.1860          0.2750                  0.08902  \n",
       "2                0.2430          0.3613                  0.08758  \n",
       "3                0.2575          0.6638                  0.17300  \n",
       "4                0.1625          0.2364                  0.07678  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "78d650f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:31.117891Z",
     "iopub.status.busy": "2025-09-11T04:51:31.117584Z",
     "iopub.status.idle": "2025-09-11T04:51:31.125543Z",
     "shell.execute_reply": "2025-09-11T04:51:31.124415Z"
    },
    "papermill": {
     "duration": 0.017246,
     "end_time": "2025-09-11T04:51:31.127195",
     "exception": false,
     "start_time": "2025-09-11T04:51:31.109949",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0\n",
       "1    0\n",
       "2    0\n",
       "3    0\n",
       "4    0\n",
       "Name: diagnosis, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed3095df",
   "metadata": {
    "papermill": {
     "duration": 0.007145,
     "end_time": "2025-09-11T04:51:31.141266",
     "exception": false,
     "start_time": "2025-09-11T04:51:31.134121",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now we split the data into train and test set."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91b5f0ba",
   "metadata": {
    "papermill": {
     "duration": 0.006496,
     "end_time": "2025-09-11T04:51:31.155274",
     "exception": false,
     "start_time": "2025-09-11T04:51:31.148778",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We define X_train which will be containing the training data, and X_test, which contains testing data.\n",
    "Also we have y_train which contains labels or output for training data and y_tet contains the same testing data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7ccc79a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:31.171021Z",
     "iopub.status.busy": "2025-09-11T04:51:31.170728Z",
     "iopub.status.idle": "2025-09-11T04:51:33.181757Z",
     "shell.execute_reply": "2025-09-11T04:51:33.180448Z"
    },
    "papermill": {
     "duration": 2.021844,
     "end_time": "2025-09-11T04:51:33.183985",
     "exception": false,
     "start_time": "2025-09-11T04:51:31.162141",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74f5bb70",
   "metadata": {
    "papermill": {
     "duration": 0.007066,
     "end_time": "2025-09-11T04:51:33.198889",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.191823",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Before we train the algorithm, its necessary to scale all the features, so that input data maintains a boundary. We use StandardScaler to do this operation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b246ff3a",
   "metadata": {
    "papermill": {
     "duration": 0.007086,
     "end_time": "2025-09-11T04:51:33.213385",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.206299",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "fit_tranform learns about your parameters as well as tranforms or scales the data\n",
    "transform only transforms or scales your data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "79afc555",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:33.230457Z",
     "iopub.status.busy": "2025-09-11T04:51:33.229908Z",
     "iopub.status.idle": "2025-09-11T04:51:33.264689Z",
     "shell.execute_reply": "2025-09-11T04:51:33.263543Z"
    },
    "papermill": {
     "duration": 0.045994,
     "end_time": "2025-09-11T04:51:33.266917",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.220923",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc42d773",
   "metadata": {
    "papermill": {
     "duration": 0.006387,
     "end_time": "2025-09-11T04:51:33.280224",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.273837",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We define the SVM model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8315285b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:33.296343Z",
     "iopub.status.busy": "2025-09-11T04:51:33.295906Z",
     "iopub.status.idle": "2025-09-11T04:51:33.443458Z",
     "shell.execute_reply": "2025-09-11T04:51:33.442444Z"
    },
    "papermill": {
     "duration": 0.157648,
     "end_time": "2025-09-11T04:51:33.445245",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.287597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(kernel=&#x27;linear&#x27;, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "SVC(kernel='linear', random_state=42)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "svm_classifier = SVC(kernel='linear', C=1.0, random_state=42)\n",
    "svm_classifier.fit(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "82e90abd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:33.461651Z",
     "iopub.status.busy": "2025-09-11T04:51:33.461249Z",
     "iopub.status.idle": "2025-09-11T04:51:33.479823Z",
     "shell.execute_reply": "2025-09-11T04:51:33.478610Z"
    },
    "papermill": {
     "duration": 0.028473,
     "end_time": "2025-09-11T04:51:33.481439",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.452966",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.96\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.95      0.94        43\n",
      "           1       0.97      0.96      0.96        71\n",
      "\n",
      "    accuracy                           0.96       114\n",
      "   macro avg       0.95      0.96      0.95       114\n",
      "weighted avg       0.96      0.96      0.96       114\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "y_pred = svm_classifier.predict(X_test_scaled)\n",
    "print(f\"Accuracy: {accuracy_score(y_test, y_pred):.2f}\")\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3ee661d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:33.497728Z",
     "iopub.status.busy": "2025-09-11T04:51:33.497315Z",
     "iopub.status.idle": "2025-09-11T04:51:33.510760Z",
     "shell.execute_reply": "2025-09-11T04:51:33.509761Z"
    },
    "papermill": {
     "duration": 0.023891,
     "end_time": "2025-09-11T04:51:33.512591",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.488700",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df1 = pd.read_csv(\"/kaggle/input/breast-cancer-dataset/Breast_cancer_dataset.csv\")\n",
    "df1 = df1.drop([\"diagnosis\"], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e74b69cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:33.529380Z",
     "iopub.status.busy": "2025-09-11T04:51:33.528981Z",
     "iopub.status.idle": "2025-09-11T04:51:33.539206Z",
     "shell.execute_reply": "2025-09-11T04:51:33.537910Z"
    },
    "papermill": {
     "duration": 0.020784,
     "end_time": "2025-09-11T04:51:33.541229",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.520445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id                         842302.000000\n",
      "radius_mean                    17.990000\n",
      "texture_mean                   10.380000\n",
      "perimeter_mean                122.800000\n",
      "area_mean                    1001.000000\n",
      "smoothness_mean                 0.118400\n",
      "compactness_mean                0.277600\n",
      "concavity_mean                  0.300100\n",
      "concave points_mean             0.147100\n",
      "symmetry_mean                   0.241900\n",
      "fractal_dimension_mean          0.078710\n",
      "radius_se                       1.095000\n",
      "texture_se                      0.905300\n",
      "perimeter_se                    8.589000\n",
      "area_se                       153.400000\n",
      "smoothness_se                   0.006399\n",
      "compactness_se                  0.049040\n",
      "concavity_se                    0.053730\n",
      "concave points_se               0.015870\n",
      "symmetry_se                     0.030030\n",
      "fractal_dimension_se            0.006193\n",
      "radius_worst                   25.380000\n",
      "texture_worst                  17.330000\n",
      "perimeter_worst               184.600000\n",
      "area_worst                   2019.000000\n",
      "smoothness_worst                0.162200\n",
      "compactness_worst               0.665600\n",
      "concavity_worst                 0.711900\n",
      "concave points_worst            0.265400\n",
      "symmetry_worst                  0.460100\n",
      "fractal_dimension_worst         0.118900\n",
      "Name: 0, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "df1 = df1.drop([\"Unnamed: 32\"], axis=1)\n",
    "first_row = df1.iloc[0]\n",
    "print(first_row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fd07d8b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:33.557391Z",
     "iopub.status.busy": "2025-09-11T04:51:33.557014Z",
     "iopub.status.idle": "2025-09-11T04:51:33.563348Z",
     "shell.execute_reply": "2025-09-11T04:51:33.562357Z"
    },
    "papermill": {
     "duration": 0.016293,
     "end_time": "2025-09-11T04:51:33.565107",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.548814",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df1 = df1.drop([\"id\"],axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "009f18f9",
   "metadata": {
    "papermill": {
     "duration": 0.007,
     "end_time": "2025-09-11T04:51:33.579648",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.572648",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Giving input to the model to check the output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "525b9cec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:33.595406Z",
     "iopub.status.busy": "2025-09-11T04:51:33.595056Z",
     "iopub.status.idle": "2025-09-11T04:51:33.602347Z",
     "shell.execute_reply": "2025-09-11T04:51:33.601163Z"
    },
    "papermill": {
     "duration": 0.01733,
     "end_time": "2025-09-11T04:51:33.604047",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.586717",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\n"
     ]
    }
   ],
   "source": [
    "inputs = df1.iloc[0].values.reshape(1,-1)\n",
    "\n",
    "answer = svm_classifier.predict(inputs)\n",
    "print(answer)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9aa834b5",
   "metadata": {
    "papermill": {
     "duration": 0.007302,
     "end_time": "2025-09-11T04:51:33.619110",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.611808",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Reshaping the extracted row to a 2d array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "21a61a25",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:33.635389Z",
     "iopub.status.busy": "2025-09-11T04:51:33.635040Z",
     "iopub.status.idle": "2025-09-11T04:51:33.640904Z",
     "shell.execute_reply": "2025-09-11T04:51:33.639524Z"
    },
    "papermill": {
     "duration": 0.016019,
     "end_time": "2025-09-11T04:51:33.642655",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.626636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30\n"
     ]
    }
   ],
   "source": [
    "n_features = df1.shape[1]\n",
    "print(n_features)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1007da37",
   "metadata": {
    "papermill": {
     "duration": 0.006813,
     "end_time": "2025-09-11T04:51:33.656760",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.649947",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Picking random inputs to check the different outputs given by the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d36cf3bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:33.777468Z",
     "iopub.status.busy": "2025-09-11T04:51:33.777079Z",
     "iopub.status.idle": "2025-09-11T04:51:33.782781Z",
     "shell.execute_reply": "2025-09-11T04:51:33.781523Z"
    },
    "papermill": {
     "duration": 0.016389,
     "end_time": "2025-09-11T04:51:33.784681",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.768292",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "random_input = np.random.rand(n_features) * 40\n",
    "random_input = random_input.reshape(1,-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "bc3a099f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:33.801527Z",
     "iopub.status.busy": "2025-09-11T04:51:33.801099Z",
     "iopub.status.idle": "2025-09-11T04:51:33.810077Z",
     "shell.execute_reply": "2025-09-11T04:51:33.809019Z"
    },
    "papermill": {
     "duration": 0.019601,
     "end_time": "2025-09-11T04:51:33.811913",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.792312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "random_inputs = scaler.transform(random_input)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8556c916",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:33.828661Z",
     "iopub.status.busy": "2025-09-11T04:51:33.828244Z",
     "iopub.status.idle": "2025-09-11T04:51:33.834454Z",
     "shell.execute_reply": "2025-09-11T04:51:33.833391Z"
    },
    "papermill": {
     "duration": 0.016651,
     "end_time": "2025-09-11T04:51:33.836214",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.819563",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "answer = svm_classifier.predict(random_inputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d225068e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-11T04:51:33.852964Z",
     "iopub.status.busy": "2025-09-11T04:51:33.852579Z",
     "iopub.status.idle": "2025-09-11T04:51:33.859181Z",
     "shell.execute_reply": "2025-09-11T04:51:33.858140Z"
    },
    "papermill": {
     "duration": 0.016784,
     "end_time": "2025-09-11T04:51:33.860838",
     "exception": false,
     "start_time": "2025-09-11T04:51:33.844054",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[23.7317277  15.19034856  2.51653612 34.29365691 29.41916269 11.77789137\n",
      "   2.33313127 18.15553974 20.99451525  8.49601248 18.72948553 31.19367186\n",
      "  29.98091166 37.95279427  3.30449639 28.83896082 29.8541648  12.98896594\n",
      "  36.04742977 36.16722817 37.89225334  6.57639362  5.71718328 31.83269498\n",
      "  18.3531399  37.11964873 15.24680506  5.72682136 12.97919573 24.53946704]]\n",
      "The predicted value is:  Benign\n"
     ]
    }
   ],
   "source": [
    "label = {0: \"Malignant\", 1: \"Benign\"}\n",
    "print(random_input)\n",
    "\n",
    "print(\"The predicted value is: \", label[answer[0]])"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7975086,
     "sourceId": 12622449,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12.840291,
   "end_time": "2025-09-11T04:51:34.893106",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-11T04:51:22.052815",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
